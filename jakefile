var paprika = require('./Build/node_modules/paprika'),
	msbuild = paprika.msbuild,
	run = paprika.run,
	path = require('path'),
	fs = require('fs'),
	config = {
		projectName: 'Facebook C# SDK',
		projectSafeName: 'FacebookCSharpSDK',
		version: fs.readFileSync('VERSION', 'utf-8'),
		paths: {
			root: path.normalize(__dirname)
		}
	};

console.log(config.projectName + ' v' + config.version);

msbuild.setDefaults({
	properties: { Configuration: 'Release' },
	processor: 'x86',
	version: 'net40'
});

task('default', ['build']);

directory('Dist/');

namespace('build', function () {

	desc('Build .NET 4.5 binaries');
	task('net45', ['clean:net45'], function () {
		msbuild({
			file: 'Source/Facebook-Net45.sln',
			targets: ['Build']
		}, complete);
	}, { async: true});
	
	desc('Build .NET 4.0 binaries');
	task('net40', ['clean:net40'], function () {
		msbuild({
			file: 'Source/Facebook-Net40.sln',
			targets: ['Build']
		}, complete);
	}, { async: true});

	desc('Build .NET 3.5 binaries');
	task('net35', ['clean:net35'], function () {
		msbuild({
			file: 'Source/Facebook-Net35.sln',
			targets: ['Build']
		}, complete);
	}, { async: true});

	desc('Build WINRT (Metro) binaries');
	task('winrt', ['clean:winrt'], function () {
		msbuild({
			file: 'Source/Facebook-WinRT.sln',
			targets: ['Build']
		}, complete);
	}, { async: true});

	desc('Build Windows Phone 7.1 binaries');
	task('wp71', ['clean:wp71'], function () {
		msbuild({
			file: 'Source/Facebook-WP7.sln',
			targets: ['Build']
		}, complete)
	}, { async: true});

	desc('Build Silverlight 5 binaries');
	task('sl5', ['clean:sl5'], function () {
		msbuild({
			file: 'Source/Facebook-SL5.sln',
			targets: ['Build']
		}, complete);
	}, { async: true});

	task('all', ['build:net45', 'build:net40', 'build:net35', 'build:winrt', 'build:wp71', 'build:sl5']);

});

task('build', ['build:all']);

namespace('clean', function () {

	task('net45', function () {
		msbuild({
			file: 'Source/Facebook-Net45.sln',
			targets: ['Clean']
		}, complete);
	}, { async: true});
	
	task('net40', function () {
		msbuild({
			file: 'Source/Facebook-Net40.sln',
			targets: ['Clean']
		}, complete);
	}, { async: true});

	task('net35', function () {
		msbuild({
			file: 'Source/Facebook-Net35.sln',
			targets: ['Clean']
		}, complete);
	}, { async: true});

	task('winrt', function () {
		msbuild({
			file: 'Source/Facebook-WinRT.sln',
			targets: ['Clean']
		}, complete);
	}, { async: true});

	task('wp71', function () {
		msbuild({
			file: 'Source/Facebook-WP7.sln',
			targets: ['Clean']
		}, complete);
	}, { async: true});

	task('sl5', function () {
		msbuild({
			file: 'Source/Facebook-SL5.sln',
			targets: ['Clean']
		}, complete);
	}, { async: true});

	task('all', ['clean:net45', 'clean:net40', 'clean:net35',  'clean:winrt', 'clean:wp71', 'clean:sl5']);

});

task('clean', ['clean:all']);

directory('Dist/NuGet/', ['Dist/']);
directory('Dist/SymbolSource/', ['Dist/']);

namespace('nuget', function() {	

	var nugetExe = path.join(config.paths.root, 'Source/.nuget/NuGet.exe');

	task('download', function () {
		msbuild({
			file: 'Source/.nuget/NuGet.targets',
			targets: ['CheckPrerequisites']
		}, complete);
	}, { async: true});

	namespace('pack', function () {		
		
		namespace('nuget', function () {			
			task('facebook', ['nuget:download', 'Dist/NuGet/', 'build'], function () {
				run(nugetExe, ['pack', 'Build/NuGet/Facebook/Facebook.nuspec', '-Verbose', '-OutputDirectory', 'Dist/NuGet/', '-version', config.version ], function (code) {
					code === 0 ? complete() : fail('nuget:pack:nuget:facebook failed');
				});
			}, { async: true });

			task('all', ['nuget:pack:nuget:facebook']);
		});

		task('nuget', ['nuget:pack:nuget:all']);

		namespace('symbolsource', function () {			
			task('facebook', ['nuget:download', 'Dist/SymbolSource/', 'build'], function () {
				run(nugetExe, ['pack', 'Build/SymbolSource/Facebook/Facebook.nuspec', '-Verbose', '-OutputDirectory', 'Dist/SymbolSource/', '-version', config.version ], function (code) {
					code === 0 ? complete() : fail('nuget:pack:symbolsource:facebook failed');
				});
			}, { async: true });

			task('all', ['nuget:pack:symbolsource:facebook']);
		});

		task('symbolsource', ['nuget:pack:symbolsource:all']);

		task('all', ['nuget:pack:nuget', 'nuget:pack:symbolsource']);
	});

	desc('Create NuGet and SymbolSource *.nupkg files');
	task('pack', ['nuget:pack:all']);

});
